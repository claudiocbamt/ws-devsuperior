package com.devsuperior.dscatalog.services;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import javax.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.devsuperior.dscatalog.dto.ProductDTO;
import com.devsuperior.dscatalog.entities.Product;
import com.devsuperior.dscatalog.entities.category;
import com.devsuperior.dscatalog.repositoryes.CategoryRepository;
import com.devsuperior.dscatalog.repositoryes.ProductRepository;
import com.devsuperior.dscatalog.services.exceptions.DataBaseException;
import com.devsuperior.dscatalog.services.exceptions.ResourceNotFoundException;


@Service

public class ProductService {
	
	@Autowired
	
	private ProductRepository repository;
	@Autowired
	private CategoryRepository categoryRepository;
	 //não trava o banco de dados (loking)
	/*
	public List<Product> BuscarTodos(){
		
		return repository.findAll();
		
	}
	*/
	@Transactional(readOnly = true)
	public Page<ProductDTO> findAllPaged(Long categoryId, String name, PageRequest pageRequest) {
		List<category> categories = (categoryId == 0) ? null : Arrays.asList(categoryRepository.getById(categoryId));
		Page<Product> page = repository.EncontrarProdutos(categories, name, pageRequest);
		repository.find(page.toList());
		return page.map(x -> new ProductDTO(x, x.getCategories()));
	}
	
	@Transactional(readOnly= true) //não trava o banco de dados (loking)
	
	 public ProductDTO BuscarPorId(long Id){
			
			Optional <Product> obj = repository.findById(Id);
			
			//Product entity = obj.get();
			Product entity = obj.orElseThrow(() -> new ResourceNotFoundException("Entity not Foun"));
			return new ProductDTO(entity);
		}
	@Transactional
	public ProductDTO Inserir(ProductDTO dto) {
		
		Product entidade = new Product();
		//entidade.setName(dto.getName());
		 entidade = repository.save(entidade);
		// TODO Auto-generated method stub
		return new ProductDTO(entidade);
	}
	@Transactional
	public ProductDTO Atualizar(Long id, ProductDTO dto) {
		try {
		Product entidade = repository.getById(id);
		//entidade.setName(dto.getName());
		entidade = repository.save(entidade);
		return new ProductDTO(entidade);
		}
		catch(EntityNotFoundException e) {
			throw new ResourceNotFoundException("Id não encontrado " + id);
		}
		
	}

	public void Excluir(Long id) {
		try {
			repository.deleteById(id);
		}
		catch(EmptyResultDataAccessException e) {
			throw new ResourceNotFoundException("Id não encontrado " + id);
		}
		
		catch(DataIntegrityViolationException e) {
			throw new DataBaseException("Violação de Integridade ");
		}
		
	}
		

}
